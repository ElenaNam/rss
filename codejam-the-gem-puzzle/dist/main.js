(()=>{const e=document.createElement("div"),t=document.createElement("div"),n=document.createElement("div"),o=document.createElement("div"),l=document.createElement("div");let a=document.createElement("div");const s=document.createElement("div"),r=document.createElement("audio"),d=document.createElement("audio");let c,i=document.querySelector(".score"),p=document.querySelector(".time"),u=0,m=0,g=0,f=0;const S=document.createElement("button"),v=document.createElement("button"),y=document.createElement("button"),b=document.createElement("button"),h=(document.createElement("button"),document.createElement("button")),C=document.createDocumentFragment();let I;window.innerWidth>480?I=99:window.innerWidth<=480&&(I=78);const L=e=>`<i class = material-icons>${e}</i>`;function E(){const e={value:0,left:0,top:0,element:{}};let t,n,l=[],s=[];function d(t){a=document.createElement("div"),a.classList.add("puzzle-cell");const n=l[t];if(Math.abs(e.left-n.left)+Math.abs(e.top-n.top)>1)return;n.element.style.left=e.left*I+"px",n.element.style.top=e.top*I+"px";const o=e.left,s=e.top;e.left=n.left,e.top=n.top,n.left=o,n.top=s,l.every((e=>e.value===4*e.top+e.left))&&N(),i=document.querySelector(".score"),u++,i.textContent="score: "+u}if(localStorage.getItem("field")||(l=[],l.push(e),s=[...Array(15).keys()].sort((()=>Math.random()-.5))),localStorage.field)for(let s=0;s<16;s++){if(0!==JSON.parse(localStorage.field)[s].value){a=document.createElement("div"),a.classList.add("puzzle-cell"),a.setAttribute("draggable","true");const{value:e}=JSON.parse(localStorage.field)[s];a.textContent=e,t=s%4,n=(s-t)/4,l.push(JSON.parse(localStorage.field)[s]),a.style.left=t*I+"px",a.style.top=n*I+"px",cell=l[s],cell.element=a,o.append(a)}else e.left=JSON.parse(localStorage.field)[s].left,e.top=JSON.parse(localStorage.field)[s].top,l.push(e);a.addEventListener("click",(()=>{d(s),r.play()})),window.onbeforeunload=()=>{delete localStorage.field,T(),l=l.sort(((e,t)=>e.left-t.left)),l=l.sort(((e,t)=>e.top-t.top));const e=JSON.stringify(l);localStorage.setItem("field",e)}}else for(let e=1;e<16;e++){const a=s[e-1]+1,c=document.createElement("div");c.classList.add("puzzle-cell"),c.setAttribute("draggable","true"),c.textContent=a,t=e%4,n=(e-t)/4,l.push({value:a,left:t,top:n,element:c}),c.style.left=t*I+"px",c.style.top=n*I+"px",o.append(c),c.addEventListener("click",(()=>{d(e),r.play()})),window.onbeforeunload=()=>{delete localStorage.field,T(),l=l.sort(((e,t)=>e.left-t.left)),l=l.sort(((e,t)=>e.top-t.top));const e=JSON.stringify(l);localStorage.setItem("field",e)}}return C.appendChild(a),C}function $(e){return(parseInt(e,10)<10?"0":"")+e}const x=()=>{p=document.querySelector(".time"),m++,60===m&&(m=0,g+=1),60===g&&(g=0,f+=1),p.textContent=`${$(f)}: ${$(g)}: ${$(m)}`},N=()=>{clearInterval(c),s.innerHTML=`<div class="congratulation"><span>Congratulations!</span>\n    <span>You won with <i>${u+1}</i> score </span>\n    <span>for time <i>0${f}: 0${g}: ${m}</i></span></div>`,setTimeout((()=>{document.body.appendChild(s),d.play()}),300),s.addEventListener("click",(()=>{document.body.removeChild(s),t.style.display="flex"})),w()};let O,J;localStorage.getItem("results")?(O=JSON.parse(localStorage.getItem("results")),J=JSON.parse(localStorage.getItem("results")).length):(O=[],J=0);const w=()=>{J++;const e={stage:J,score:u+1};O.length<10?O.push(e):10===O.length&&e.score<=O[O.length-1].score&&(O.pop(),O.push(e)),O.sort(((e,t)=>e.score-t.score));const t=JSON.stringify(O);localStorage.setItem("results",t)},T=()=>{const e={score:u,hour:f,min:g,sec:m},t=JSON.stringify(e);localStorage.setItem("gameInfo",t)};y.addEventListener("click",(()=>{setTimeout((()=>{t.style.display="none"}),100),o.innerHTML="",delete localStorage.field,u=0,m=0,g=0,f=0,l.innerHTML=`<div class="score"><span>score: 0</span></div>\n    <div class="time"><span>0${f}: 0${g}: 0${m}</span></div>`,l.appendChild(S),l.appendChild(v),c&&clearInterval(c),c=setInterval(x,1e3),E()})),h.addEventListener("click",(()=>{setTimeout((()=>{t.style.display="none"}),100),localStorage.getItem("gameInfo")?(u=JSON.parse(localStorage.getItem("gameInfo")).score,i=document.querySelector(".score"),i.textContent="score: "+u,p=document.querySelector(".time"),f=JSON.parse(localStorage.getItem("gameInfo")).hour,g=JSON.parse(localStorage.getItem("gameInfo")).min,m=JSON.parse(localStorage.getItem("gameInfo")).sec,p.textContent=`${$(f)}: ${$(g)}: ${$(m)}`,c=setInterval(x,1e3)):c=setInterval(x,1e3)})),S.addEventListener("click",(()=>{clearInterval(c),T(),t.style.display="flex",h.classList.add("button","button-continue"),h.textContent="Continue",t.appendChild(h)})),v.addEventListener("click",(()=>{console.log("btnAllSound.textContent "+v.textContent),console.log("btnAllSound.innerHTML "+v.innerHTML),"volume_up"===v.textContent?(v.innerHTML=L("volume_off"),r.volume=0,d.volume=0):(v.innerHTML=L("volume_up"),r.volume=1,d.volume=1)})),b.addEventListener("click",(()=>{let e,o;setTimeout((()=>{t.style.display="none"}),100),setTimeout((()=>{n.style.display="flex"}),100),n.classList.add("result-wrapper"),document.body.appendChild(n),JSON.parse(localStorage.getItem("results"))&&(e=JSON.parse(localStorage.getItem("results")),console.log(e),e=e.map((e=>`Stage ${e.stage}_____${e.score} <br>`))),o=e?e.join(" "):"",n.innerHTML=`\n    <div class="result-wrapper">\n    <p>Top of results</p>\n    <span>${o}</span>\n    </div>`})),n.addEventListener("click",(()=>{setTimeout((()=>{n.style.display="none"}),100),setTimeout((()=>{t.style.display="flex"}),100)})),window.addEventListener("DOMContentLoaded",(()=>{e.classList.add("wrapper"),document.body.appendChild(e),o.classList.add("puzzle-wrapper"),document.body.appendChild(o),o.appendChild(E()),r.setAttribute("src","src/assets/1596830637_clickb7.mp3"),document.body.appendChild(r),l.classList.add("additional-wrapper"),JSON.parse(localStorage.gameInfo)?(u=JSON.parse(localStorage.getItem("gameInfo")).score,f=JSON.parse(localStorage.getItem("gameInfo")).hour,g=JSON.parse(localStorage.getItem("gameInfo")).min,m=JSON.parse(localStorage.getItem("gameInfo")).sec,l.innerHTML=`<div class="score">score: ${u}</div>\n            <div class="time"><span>0${f}: 0${g}: 0${m}</span></div>`):l.innerHTML=`<div class="score">score: ${u}</div>\n            <div class="time"><span>0${f}: 0${g}: 0${m}</span></div>`,S.classList.add("pause","button"),S.textContent="PAUSE",l.appendChild(S),v.classList.add("button","allsound"),v.innerHTML=L("volume_up"),l.appendChild(v),document.body.appendChild(l),t.classList.add("popap-wrapper"),document.body.appendChild(t),y.classList.add("button","button-newgame"),y.textContent="New Game",t.appendChild(y),b.classList.add("button","button-progress"),b.textContent="Progress",t.appendChild(b),JSON.parse(localStorage.field)&&(h.classList.add("button","button-continue"),h.textContent="Continue",t.appendChild(h)),s.classList.add("congratulation"),d.setAttribute("src","src/assets/903a9e120e7b9b3.mp3"),document.body.appendChild(d)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,